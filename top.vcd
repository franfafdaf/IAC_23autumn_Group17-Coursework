$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 h a0 [31:0] $end
  $var wire  1 f clk $end
  $var wire  1 g rst $end
  $scope module top $end
   $var wire 12 Q A [11:0] $end
   $var wire  5 R A1 [4:0] $end
   $var wire  5 S A2 [4:0] $end
   $var wire  5 T A3 [4:0] $end
   $var wire  3 O ALUControl [2:0] $end
   $var wire 32 a ALUResult [31:0] $end
   $var wire  1 K ALUSrcA $end
   $var wire  1 L ALUSrcB $end
   $var wire 25 U Imm [24:0] $end
   $var wire 32 C ImmExt [31:0] $end
   $var wire  3 M ImmSrc [2:0] $end
   $var wire 32 E Instr [31:0] $end
   $var wire  1 P LdSrc $end
   $var wire  1 J MemWrite $end
   $var wire 32 D PC [31:0] $end
   $var wire  1 i PCSrc $end
   $var wire 32 m PC_Plus [31:0] $end
   $var wire 32 j ReadData [31:0] $end
   $var wire  1 N RegWrite $end
   $var wire 32 _ Result [31:0] $end
   $var wire  1 I ResultSrc $end
   $var wire  1 n StSrc $end
   $var wire 32 ` WriteData [31:0] $end
   $var wire  1 ^ Zero $end
   $var wire 32 h a0 [31:0] $end
   $var wire  1 f clk $end
   $var wire  1 H func75 $end
   $var wire  3 G funct3 [2:0] $end
   $var wire  7 F opcode [6:0] $end
   $var wire  1 o reset $end
   $var wire  1 g rst $end
   $scope module my_DataMux $end
    $var wire 32 a ALUResult [31:0] $end
    $var wire 32 m PCPlus [31:0] $end
    $var wire 32 j RD [31:0] $end
    $var wire 32 _ Result [31:0] $end
    $var wire  2 V ResultSrc [1:0] $end
   $upscope $end
   $scope module my_alu_top $end
    $var wire  5 R A1 [4:0] $end
    $var wire  5 S A2 [4:0] $end
    $var wire  5 T A3 [4:0] $end
    $var wire  3 O ALUControl [2:0] $end
    $var wire 32 a ALUResult [31:0] $end
    $var wire  1 K ALUSrcA $end
    $var wire  1 L ALUSrcB $end
    $var wire 32 C ImmExt [31:0] $end
    $var wire 32 D PC [31:0] $end
    $var wire 32 k RD1 [31:0] $end
    $var wire 32 ` RD2 [31:0] $end
    $var wire 32 b SrcA [31:0] $end
    $var wire 32 c SrcB [31:0] $end
    $var wire 32 _ WD3 [31:0] $end
    $var wire  1 ^ Zero $end
    $var wire 32 h a0 [31:0] $end
    $var wire  1 f clk $end
    $scope module myalu $end
     $var wire  3 O ALUControl [2:0] $end
     $var wire 32 a ALUResult [31:0] $end
     $var wire 32 b SrcA [31:0] $end
     $var wire 32 c SrcB [31:0] $end
     $var wire  1 ^ Zero $end
    $upscope $end
    $scope module mymuxA $end
     $var wire  1 K ALUSrcA $end
     $var wire 32 D PC [31:0] $end
     $var wire 32 k RD1 [31:0] $end
     $var wire 32 b SrcA [31:0] $end
    $upscope $end
    $scope module mymuxB $end
     $var wire  1 L ALUSrcB $end
     $var wire 32 C ImmExt [31:0] $end
     $var wire 32 ` RD2 [31:0] $end
     $var wire 32 c SrcB [31:0] $end
    $upscope $end
    $scope module myreg_file $end
     $var wire  5 R A1 [4:0] $end
     $var wire  5 S A2 [4:0] $end
     $var wire  5 T A3 [4:0] $end
     $var wire 32 k RD1 [31:0] $end
     $var wire 32 ` RD2 [31:0] $end
     $var wire 32 _ WD3 [31:0] $end
     $var wire 32 h a0 [31:0] $end
     $var wire  1 f clk $end
     $var wire 32 # mem[0] [31:0] $end
     $var wire 32 - mem[10] [31:0] $end
     $var wire 32 . mem[11] [31:0] $end
     $var wire 32 / mem[12] [31:0] $end
     $var wire 32 0 mem[13] [31:0] $end
     $var wire 32 1 mem[14] [31:0] $end
     $var wire 32 2 mem[15] [31:0] $end
     $var wire 32 3 mem[16] [31:0] $end
     $var wire 32 4 mem[17] [31:0] $end
     $var wire 32 5 mem[18] [31:0] $end
     $var wire 32 6 mem[19] [31:0] $end
     $var wire 32 $ mem[1] [31:0] $end
     $var wire 32 7 mem[20] [31:0] $end
     $var wire 32 8 mem[21] [31:0] $end
     $var wire 32 9 mem[22] [31:0] $end
     $var wire 32 : mem[23] [31:0] $end
     $var wire 32 ; mem[24] [31:0] $end
     $var wire 32 < mem[25] [31:0] $end
     $var wire 32 = mem[26] [31:0] $end
     $var wire 32 > mem[27] [31:0] $end
     $var wire 32 ? mem[28] [31:0] $end
     $var wire 32 @ mem[29] [31:0] $end
     $var wire 32 % mem[2] [31:0] $end
     $var wire 32 A mem[30] [31:0] $end
     $var wire 32 B mem[31] [31:0] $end
     $var wire 32 & mem[3] [31:0] $end
     $var wire 32 ' mem[4] [31:0] $end
     $var wire 32 ( mem[5] [31:0] $end
     $var wire 32 ) mem[6] [31:0] $end
     $var wire 32 * mem[7] [31:0] $end
     $var wire 32 + mem[8] [31:0] $end
     $var wire 32 , mem[9] [31:0] $end
    $upscope $end
   $upscope $end
   $scope module my_control_unit $end
    $var wire  3 O ALUControl [2:0] $end
    $var wire  2 W ALUOp [1:0] $end
    $var wire  1 K ALUSrcA $end
    $var wire  1 L ALUSrcB $end
    $var wire  1 X Branch $end
    $var wire  3 M ImmSrc [2:0] $end
    $var wire  1 X Jump $end
    $var wire  1 P LdSrc $end
    $var wire  1 J MemWrite $end
    $var wire  1 i PCSrc $end
    $var wire  1 N RegWrite $end
    $var wire  1 I ResultSrc $end
    $var wire  1 n StSrc $end
    $var wire  1 ^ Zero $end
    $var wire  1 H func75 $end
    $var wire  3 G funct3 [2:0] $end
    $var wire  1 Y op5 $end
    $var wire  7 F opcode [6:0] $end
    $scope module ALU_decode $end
     $var wire  3 O ALUControl [2:0] $end
     $var wire  2 W ALUOp [1:0] $end
     $var wire  2 Z decode [1:0] $end
     $var wire  1 H func75 $end
     $var wire  3 G funct3 [2:0] $end
     $var wire  1 Y op5 $end
    $upscope $end
    $scope module PCSrc_decode $end
     $var wire  1 X Branch $end
     $var wire  1 X Jump $end
     $var wire  1 i PCSrc $end
     $var wire  1 ^ Zero $end
     $var wire  3 G funct3 [2:0] $end
    $upscope $end
    $scope module main_decode $end
     $var wire  2 W ALUOp [1:0] $end
     $var wire  1 K ALUSrcA $end
     $var wire  1 L ALUSrcB $end
     $var wire  1 X Branch $end
     $var wire  3 M ImmSrc [2:0] $end
     $var wire  1 X Jump $end
     $var wire  1 P LdSrc $end
     $var wire  1 J MemWrite $end
     $var wire  1 N RegWrite $end
     $var wire  1 I ResultSrc $end
     $var wire  1 n StSrc $end
     $var wire  3 G funct3 [2:0] $end
     $var wire  7 F opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module my_data_memory $end
    $var wire 32 a A [31:0] $end
    $var wire 32 p DATA_WIDTH [31:0] $end
    $var wire  1 P LdSrc $end
    $var wire 32 j RD [31:0] $end
    $var wire  1 n StSrc $end
    $var wire 32 ` WD [31:0] $end
    $var wire  1 J WE $end
    $var wire  1 f clk $end
    $var wire 32 d corrected_WD [31:0] $end
    $var wire 32 e read_data_internal [31:0] $end
    $scope module my_mem $end
     $var wire 32 a A [31:0] $end
     $var wire 32 p ADDRESS_WIDTH [31:0] $end
     $var wire 32 q DATA_WIDTH [31:0] $end
     $var wire 32 e RD [31:0] $end
     $var wire 32 d WD [31:0] $end
     $var wire  1 J WE $end
     $var wire  1 f clk $end
    $upscope $end
    $scope module my_mem_i $end
     $var wire 32 a A [31:0] $end
     $var wire 32 p DATA_WIDTH [31:0] $end
     $var wire 32 e RD [31:0] $end
     $var wire  1 n StSrc $end
     $var wire 32 ` WD_i [31:0] $end
     $var wire 32 d WD_o [31:0] $end
    $upscope $end
    $scope module my_mem_o $end
     $var wire 32 a A [31:0] $end
     $var wire 32 p DATA_WIDTH [31:0] $end
     $var wire  1 P LdSrc $end
     $var wire 32 e RD_i [31:0] $end
     $var wire 32 j RD_o [31:0] $end
    $upscope $end
   $upscope $end
   $scope module my_extend $end
    $var wire 25 U Imm [31:7] $end
    $var wire 32 C ImmExt [31:0] $end
    $var wire  3 M ImmSrc [2:0] $end
   $upscope $end
   $scope module my_instr_mem $end
    $var wire  8 [ A [7:0] $end
    $var wire 32 q A_length [31:0] $end
    $var wire 32 q D_length [31:0] $end
    $var wire 32 E RD [31:0] $end
   $upscope $end
   $scope module my_pc_top $end
    $var wire 32 C ImmExt [31:0] $end
    $var wire 32 D PC [31:0] $end
    $var wire 32 l PCNext [31:0] $end
    $var wire  1 i PCSrc $end
    $var wire 32 \ PC_Plus [31:0] $end
    $var wire 32 ] PC_Target [31:0] $end
    $var wire 32 p PC_WIDTH [31:0] $end
    $var wire  1 f clk $end
    $var wire  1 o rst $end
    $scope module my_pc_mux $end
     $var wire  1 i PCSrc $end
     $var wire 32 l PC_Next [31:0] $end
     $var wire 32 \ PC_Plus [31:0] $end
     $var wire 32 ] PC_Target [31:0] $end
     $var wire 32 p PC_WIDTH [31:0] $end
    $upscope $end
    $scope module my_pc_plus $end
     $var wire 32 \ NextPC [31:0] $end
     $var wire 32 D PC [31:0] $end
     $var wire 32 p PC_WIDTH [31:0] $end
    $upscope $end
    $scope module my_pc_target $end
     $var wire 32 p DATA_WIDTH [31:0] $end
     $var wire 32 C ImmExt [31:0] $end
     $var wire 32 D PC [31:0] $end
     $var wire 32 p PC_WIDTH [31:0] $end
     $var wire 32 ] PC_target [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b0000000 F
b000 G
0H
0I
0J
0K
0L
b000 M
0N
b000 O
0P
b000000000000 Q
b00000 R
b00000 S
b00000 T
b0000000000000000000000000 U
b00 V
b00 W
0X
0Y
b00 Z
b00000000 [
b00000000000000000000000000000100 \
b00000000000000000000000000000000 ]
0^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
1f
0g
b00000000000000000000000000000000 h
0i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000100 l
b00000000000000000000000000000000 m
0n
0o
b00000000000000000000000000100000 p
b00000000000000000000000000001000 q
